{"ast":null,"code":"import * as THREE from \"three\";\nconst CreateParticle = () => {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.position.z = 5;\n  const renderer = new THREE.WebGLRenderer({\n    alpha: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  const particles = new THREE.Group();\n  for (let i = 0; i < 200; i++) {\n    const particle = new THREE.Mesh(new THREE.SphereGeometry(0.05, 32, 32),\n    // 원형 파티클 생성\n    new THREE.MeshBasicMaterial({\n      color: 0x0000ff\n    }) // 흰색 파티클\n    );\n\n    const phi = Math.random() * Math.PI * 2;\n    const theta = Math.random() * Math.PI;\n    const radius = 2; // 원의 반지름\n    particle.position.set(radius * Math.sin(phi) * Math.cos(theta), radius * Math.sin(phi) * Math.sin(theta), radius * Math.cos(phi));\n    particles.add(particle);\n  }\n  scene.add(particles);\n  const animate = () => {\n    requestAnimationFrame(animate);\n    particles.rotation.x += 0.005;\n    particles.rotation.y += 0.005;\n    renderer.render(scene, camera);\n  };\n  animate();\n  const onWindowResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n  window.addEventListener(\"resize\", onWindowResize);\n};\n_c = CreateParticle;\nexport default CreateParticle;\nvar _c;\n$RefreshReg$(_c, \"CreateParticle\");","map":{"version":3,"names":["THREE","CreateParticle","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","setSize","document","body","appendChild","domElement","particles","Group","i","particle","Mesh","SphereGeometry","MeshBasicMaterial","color","phi","Math","random","PI","theta","radius","set","sin","cos","add","animate","requestAnimationFrame","rotation","x","y","render","onWindowResize","aspect","updateProjectionMatrix","addEventListener","_c","$RefreshReg$"],"sources":["/Users/yoojin/Documents/GitHub/simacro/testwork/simacro/src/Components/CreateParticle.js"],"sourcesContent":["import * as THREE from \"three\";\n\nconst CreateParticle = () => {\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n  );\n  camera.position.z = 5;\n\n  const renderer = new THREE.WebGLRenderer({ alpha: true });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n\n  const particles = new THREE.Group();\n\n  for (let i = 0; i < 200; i++) {\n    const particle = new THREE.Mesh(\n      new THREE.SphereGeometry(0.05, 32, 32), // 원형 파티클 생성\n      new THREE.MeshBasicMaterial({ color: 0x0000ff }) // 흰색 파티클\n    );\n    const phi = Math.random() * Math.PI * 2;\n    const theta = Math.random() * Math.PI;\n\n    const radius = 2; // 원의 반지름\n    particle.position.set(\n      radius * Math.sin(phi) * Math.cos(theta),\n      radius * Math.sin(phi) * Math.sin(theta),\n      radius * Math.cos(phi)\n    );\n    particles.add(particle);\n  }\n\n  scene.add(particles);\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n\n    particles.rotation.x += 0.005;\n    particles.rotation.y += 0.005;\n\n    renderer.render(scene, camera);\n  };\n\n  animate();\n\n  const onWindowResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  window.addEventListener(\"resize\", onWindowResize);\n};\n\nexport default CreateParticle;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAG,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC;EAC/B,MAAMC,MAAM,GAAG,IAAIJ,KAAK,CAACK,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;EACDJ,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;EAErB,MAAMC,QAAQ,GAAG,IAAIX,KAAK,CAACY,aAAa,CAAC;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACzDF,QAAQ,CAACG,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;EACvDO,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACN,QAAQ,CAACO,UAAU,CAAC;EAE9C,MAAMC,SAAS,GAAG,IAAInB,KAAK,CAACoB,KAAK,CAAC,CAAC;EAEnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC5B,MAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,IAAI,CAC7B,IAAIvB,KAAK,CAACwB,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IAAE;IACxC,IAAIxB,KAAK,CAACyB,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC,CAAC;IACnD,CAAC;;IACD,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;IACvC,MAAMC,KAAK,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE;IAErC,MAAME,MAAM,GAAG,CAAC,CAAC,CAAC;IAClBV,QAAQ,CAACb,QAAQ,CAACwB,GAAG,CACnBD,MAAM,GAAGJ,IAAI,CAACM,GAAG,CAACP,GAAG,CAAC,GAAGC,IAAI,CAACO,GAAG,CAACJ,KAAK,CAAC,EACxCC,MAAM,GAAGJ,IAAI,CAACM,GAAG,CAACP,GAAG,CAAC,GAAGC,IAAI,CAACM,GAAG,CAACH,KAAK,CAAC,EACxCC,MAAM,GAAGJ,IAAI,CAACO,GAAG,CAACR,GAAG,CACvB,CAAC;IACDR,SAAS,CAACiB,GAAG,CAACd,QAAQ,CAAC;EACzB;EAEApB,KAAK,CAACkC,GAAG,CAACjB,SAAS,CAAC;EAEpB,MAAMkB,OAAO,GAAGA,CAAA,KAAM;IACpBC,qBAAqB,CAACD,OAAO,CAAC;IAE9BlB,SAAS,CAACoB,QAAQ,CAACC,CAAC,IAAI,KAAK;IAC7BrB,SAAS,CAACoB,QAAQ,CAACE,CAAC,IAAI,KAAK;IAE7B9B,QAAQ,CAAC+B,MAAM,CAACxC,KAAK,EAAEE,MAAM,CAAC;EAChC,CAAC;EAEDiC,OAAO,CAAC,CAAC;EAET,MAAMM,cAAc,GAAGA,CAAA,KAAM;IAC3BvC,MAAM,CAACwC,MAAM,GAAGtC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;IACtDJ,MAAM,CAACyC,sBAAsB,CAAC,CAAC;IAC/BlC,QAAQ,CAACG,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;EACzD,CAAC;EAEDF,MAAM,CAACwC,gBAAgB,CAAC,QAAQ,EAAEH,cAAc,CAAC;AACnD,CAAC;AAACI,EAAA,GArDI9C,cAAc;AAuDpB,eAAeA,cAAc;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}