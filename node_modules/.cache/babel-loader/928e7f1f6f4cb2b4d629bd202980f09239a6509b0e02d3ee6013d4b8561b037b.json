{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js\",\n  _s = $RefreshSig$();\n// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModelViewer({\n  model\n}) {\n  _s();\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 5);\n\n    // 조명 추가\n    const light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(1, 1, 1);\n    scene.add(light);\n\n    // scene.background 설정 (원하는 배경색으로 설정)\n    scene.background = new THREE.Color(\"white\");\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const loader = new GLTFLoader();\n    loader.load(model, gltf => {\n      const loadedModel = gltf.scene;\n\n      // 재질 설정\n      const material = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 0.5\n      });\n      loadedModel.traverse(node => {\n        if (node.isMesh) {\n          node.material = material;\n        }\n      });\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (loadedModel) {\n        loadedModel.scale.set(modelScale, modelScale, modelScale);\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, [model, modelScale]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0.1\",\n      max: \"2\",\n      step: \"0.1\",\n      value: modelScale,\n      onChange: e => setModelScale(parseFloat(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelViewer, \"EtACqWrxke9T1TwtqATmUyjvnlw=\");\n_c = ModelViewer;\nexport default ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","GLTFLoader","jsxDEV","_jsxDEV","ModelViewer","model","_s","containerRef","modelScale","setModelScale","loadedModel","setLoadedModel","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","light","PointLight","add","background","Color","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","loader","load","gltf","material","MeshStandardMaterial","color","roughness","metalness","traverse","node","isMesh","scale","animate","requestAnimationFrame","render","ref","children","type","min","max","step","value","onChange","e","parseFloat","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js"],"sourcesContent":["// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\n\nfunction ModelViewer({ model }) {\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 5);\n\n    // 조명 추가\n    const light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(1, 1, 1);\n    scene.add(light);\n\n    // scene.background 설정 (원하는 배경색으로 설정)\n    scene.background = new THREE.Color(\"white\");\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n\n    const loader = new GLTFLoader();\n    loader.load(model, (gltf) => {\n      const loadedModel = gltf.scene;\n\n      // 재질 설정\n      const material = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 0.5,\n      });\n      loadedModel.traverse((node) => {\n        if (node.isMesh) {\n          node.material = material;\n        }\n      });\n\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (loadedModel) {\n        loadedModel.scale.set(modelScale, modelScale, modelScale);\n      }\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, [model, modelScale]);\n\n  return (\n    <div ref={containerRef}>\n      <input\n        type=\"range\"\n        min=\"0.1\"\n        max=\"2\"\n        step=\"0.1\"\n        value={modelScale}\n        onChange={(e) => setModelScale(parseFloat(e.target.value))}\n      />\n    </div>\n  );\n}\n\nexport default ModelViewer;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,WAAWA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC9B,MAAMC,YAAY,GAAGV,MAAM,CAAC,CAAC;EAC7B,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAG,IAAIZ,KAAK,CAACa,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAId,KAAK,CAACe,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDJ,MAAM,CAACK,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAE5B;IACA,MAAMC,KAAK,GAAG,IAAIrB,KAAK,CAACsB,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/CD,KAAK,CAACF,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3BR,KAAK,CAACW,GAAG,CAACF,KAAK,CAAC;;IAEhB;IACAT,KAAK,CAACY,UAAU,GAAG,IAAIxB,KAAK,CAACyB,KAAK,CAAC,OAAO,CAAC;IAE3C,MAAMC,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,aAAa,CAAC;MACvCC,SAAS,EAAE;IACb,CAAC,CAAC;IACFF,QAAQ,CAACG,OAAO,CAACb,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDX,YAAY,CAACuB,OAAO,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;IAErD,MAAMC,MAAM,GAAG,IAAIhC,UAAU,CAAC,CAAC;IAC/BgC,MAAM,CAACC,IAAI,CAAC7B,KAAK,EAAG8B,IAAI,IAAK;MAC3B,MAAMzB,WAAW,GAAGyB,IAAI,CAACvB,KAAK;;MAE9B;MACA,MAAMwB,QAAQ,GAAG,IAAIpC,KAAK,CAACqC,oBAAoB,CAAC;QAC9CC,KAAK,EAAE,QAAQ;QACfC,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;MACb,CAAC,CAAC;MACF9B,WAAW,CAAC+B,QAAQ,CAAEC,IAAI,IAAK;QAC7B,IAAIA,IAAI,CAACC,MAAM,EAAE;UACfD,IAAI,CAACN,QAAQ,GAAGA,QAAQ;QAC1B;MACF,CAAC,CAAC;MAEF1B,WAAW,CAACkC,KAAK,CAACxB,GAAG,CAACZ,UAAU,EAAEA,UAAU,EAAEA,UAAU,CAAC;MACzDI,KAAK,CAACW,GAAG,CAACb,WAAW,CAAC;MACtBC,cAAc,CAACD,WAAW,CAAC;IAC7B,CAAC,CAAC;IAEF,MAAMmC,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B,IAAInC,WAAW,EAAE;QACfA,WAAW,CAACkC,KAAK,CAACxB,GAAG,CAACZ,UAAU,EAAEA,UAAU,EAAEA,UAAU,CAAC;MAC3D;MACAkB,QAAQ,CAACqB,MAAM,CAACnC,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAED+B,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACxC,KAAK,EAAEG,UAAU,CAAC,CAAC;EAEvB,oBACEL,OAAA;IAAK6C,GAAG,EAAEzC,YAAa;IAAA0C,QAAA,eACrB9C,OAAA;MACE+C,IAAI,EAAC,OAAO;MACZC,GAAG,EAAC,KAAK;MACTC,GAAG,EAAC,GAAG;MACPC,IAAI,EAAC,KAAK;MACVC,KAAK,EAAE9C,UAAW;MAClB+C,QAAQ,EAAGC,CAAC,IAAK/C,aAAa,CAACgD,UAAU,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACxD,EAAA,CAzEQF,WAAW;AAAA2D,EAAA,GAAX3D,WAAW;AA2EpB,eAAeA,WAAW;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}