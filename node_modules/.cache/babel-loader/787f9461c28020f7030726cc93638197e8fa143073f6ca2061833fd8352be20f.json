{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import { Route, Routes } from \"react-router-dom\";\n// import Landing from \"./Pages/Landing\";\n// import Viewer from \"./Pages/Viewer\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Routes>\n//         <Route path=\"/\" element={<Landing />} />\n//         <Route path=\"/viewer\" element={<Viewer />} />\n//       </Routes>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./Chart\"; // Chart.js 차트 컴포넌트 가져오기\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [timeRange, setTimeRange] = useState(\"1h\"); // 시간 범위 설정\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버에서 실시간 데이터 가져오기\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api/chemical-data\");\n        if (!response.ok) {\n          throw new Error(\"데이터를 가져오는 중 오류가 발생했습니다.\");\n        }\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n    fetchData();\n\n    // 일정 간격으로 데이터 업데이트\n    const updateInterval = setInterval(() => {\n      fetchData();\n    }, 30000); // 30초마다 업데이트\n\n    return () => clearInterval(updateInterval); // 컴포넌트 언마운트 시 타이머 정리\n  }, []);\n  const handleTimeRangeChange = range => {\n    setTimeRange(range);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD654\\uD559 \\uACF5\\uC7A5 \\uB300\\uC2DC\\uBCF4\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC624\\uB958: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleTimeRangeChange(\"1h\"),\n          children: \"\\uC9C0\\uB09C 1\\uC2DC\\uAC04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleTimeRangeChange(\"24h\"),\n          children: \"\\uC9C0\\uB09C 24\\uC2DC\\uAC04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        data: data,\n        timeRange: timeRange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"xe47F9aPVuuokGHl1mIa8hjHM8A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","App","_s","data","setData","timeRange","setTimeRange","loading","setLoading","error","setError","fetchData","response","fetch","ok","Error","result","json","err","updateInterval","setInterval","clearInterval","handleTimeRangeChange","range","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","onClick","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/App.js"],"sourcesContent":["// import \"./App.css\";\n// import { Route, Routes } from \"react-router-dom\";\n// import Landing from \"./Pages/Landing\";\n// import Viewer from \"./Pages/Viewer\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Routes>\n//         <Route path=\"/\" element={<Landing />} />\n//         <Route path=\"/viewer\" element={<Viewer />} />\n//       </Routes>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./Chart\"; // Chart.js 차트 컴포넌트 가져오기\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [timeRange, setTimeRange] = useState(\"1h\"); // 시간 범위 설정\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 서버에서 실시간 데이터 가져오기\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api/chemical-data\");\n        if (!response.ok) {\n          throw new Error(\"데이터를 가져오는 중 오류가 발생했습니다.\");\n        }\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // 일정 간격으로 데이터 업데이트\n    const updateInterval = setInterval(() => {\n      fetchData();\n    }, 30000); // 30초마다 업데이트\n\n    return () => clearInterval(updateInterval); // 컴포넌트 언마운트 시 타이머 정리\n  }, []);\n\n  const handleTimeRangeChange = (range) => {\n    setTimeRange(range);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>화학 공장 대시보드</h1>\n      </header>\n      {loading ? (\n        <p>데이터를 불러오는 중입니다...</p>\n      ) : error ? (\n        <p>오류: {error.message}</p>\n      ) : (\n        <div className=\"dashboard\">\n          <div className=\"controls\">\n            <button onClick={() => handleTimeRangeChange(\"1h\")}>\n              지난 1시간\n            </button>\n            <button onClick={() => handleTimeRangeChange(\"24h\")}>\n              지난 24시간\n            </button>\n          </div>\n          <Chart data={data} timeRange={timeRange} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}