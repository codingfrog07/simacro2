{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/Chart.js\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart = ({\n  data,\n  timeRange\n}) => {\n  // 시간 범위에 따라 데이터 필터링\n  const filteredData = data.filter(point => {\n    const currentTime = new Date();\n    const pointTime = new Date(point.timestamp);\n    if (timeRange === \"1h\") {\n      return currentTime - pointTime <= 3600000;\n    } else if (timeRange === \"24h\") {\n      return currentTime - pointTime <= 86400000;\n    }\n    return true;\n  });\n\n  // 데이터 처리 및 차트 구성\n  const chartData = {\n    labels: filteredData.map(point => point.timestamp),\n    datasets: [{\n      label: \"온도 (°C)\",\n      data: filteredData.map(point => point.temperature),\n      borderColor: \"rgba(255, 99, 132, 1)\",\n      fill: false\n    }, {\n      label: \"압력 (mbar)\",\n      data: filteredData.map(point => point.pressure),\n      borderColor: \"rgba(54, 162, 235, 1)\",\n      fill: false\n    }, {\n      label: \"화학1\",\n      data: filteredData.map(point => point.level1_chemical),\n      borderColor: \"rgba(75, 192, 192, 1)\",\n      fill: false\n    }, {\n      label: \"화학2\",\n      data: filteredData.map(point => point.level2_chemical),\n      borderColor: \"rgba(153, 102, 255, 1)\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","Chart","data","timeRange","filteredData","filter","point","currentTime","Date","pointTime","timestamp","chartData","labels","map","datasets","label","temperature","borderColor","fill","pressure","level1_chemical","level2_chemical","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/Chart.js"],"sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = ({ data, timeRange }) => {\n  // 시간 범위에 따라 데이터 필터링\n  const filteredData = data.filter((point) => {\n    const currentTime = new Date();\n    const pointTime = new Date(point.timestamp);\n    if (timeRange === \"1h\") {\n      return currentTime - pointTime <= 3600000;\n    } else if (timeRange === \"24h\") {\n      return currentTime - pointTime <= 86400000;\n    }\n    return true;\n  });\n\n  // 데이터 처리 및 차트 구성\n  const chartData = {\n    labels: filteredData.map((point) => point.timestamp),\n    datasets: [\n      {\n        label: \"온도 (°C)\",\n        data: filteredData.map((point) => point.temperature),\n        borderColor: \"rgba(255, 99, 132, 1)\",\n        fill: false,\n      },\n      {\n        label: \"압력 (mbar)\",\n        data: filteredData.map((point) => point.pressure),\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        fill: false,\n      },\n      {\n        label: \"화학1\",\n        data: filteredData.map((point) => point.level1_chemical),\n        borderColor: \"rgba(75, 192, 192, 1)\",\n        fill: false,\n      },\n      {\n        label: \"화학2\",\n        data: filteredData.map((point) => point.level2_chemical),\n        borderColor: \"rgba(153, 102, 255, 1)\",\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default Chart;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,KAAK,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAU,CAAC,KAAK;EACrC;EACA,MAAMC,YAAY,GAAGF,IAAI,CAACG,MAAM,CAAEC,KAAK,IAAK;IAC1C,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC9B,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACF,KAAK,CAACI,SAAS,CAAC;IAC3C,IAAIP,SAAS,KAAK,IAAI,EAAE;MACtB,OAAOI,WAAW,GAAGE,SAAS,IAAI,OAAO;IAC3C,CAAC,MAAM,IAAIN,SAAS,KAAK,KAAK,EAAE;MAC9B,OAAOI,WAAW,GAAGE,SAAS,IAAI,QAAQ;IAC5C;IACA,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF;EACA,MAAME,SAAS,GAAG;IAChBC,MAAM,EAAER,YAAY,CAACS,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACI,SAAS,CAAC;IACpDI,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,SAAS;MAChBb,IAAI,EAAEE,YAAY,CAACS,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACU,WAAW,CAAC;MACpDC,WAAW,EAAE,uBAAuB;MACpCC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,WAAW;MAClBb,IAAI,EAAEE,YAAY,CAACS,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACa,QAAQ,CAAC;MACjDF,WAAW,EAAE,uBAAuB;MACpCC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,KAAK;MACZb,IAAI,EAAEE,YAAY,CAACS,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACc,eAAe,CAAC;MACxDH,WAAW,EAAE,uBAAuB;MACpCC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,KAAK;MACZb,IAAI,EAAEE,YAAY,CAACS,GAAG,CAAEP,KAAK,IAAKA,KAAK,CAACe,eAAe,CAAC;MACxDJ,WAAW,EAAE,wBAAwB;MACrCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACElB,OAAA;IAAKsB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9BvB,OAAA,CAACF,IAAI;MAACI,IAAI,EAAES;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACC,EAAA,GAjDI3B,KAAK;AAmDX,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}