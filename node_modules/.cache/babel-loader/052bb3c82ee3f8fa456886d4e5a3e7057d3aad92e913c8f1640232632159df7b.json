{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js\",\n  _s = $RefreshSig$();\n// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModelViewer({\n  model\n}) {\n  _s();\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 800);\n\n    // 조명 추가\n    // const light = new THREE.PointLight(0xffffff, 1);\n    // light.position.set(1, 1, 1);\n    // scene.add(light);\n\n    //AmbientLight : 자연광\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.AmbientLight(color, intensity);\n    scene.add(light);\n\n    //DirectionalLight : 직사광, 태양표현\n    // const color = 0xffffff;\n    // const intensity = 1;\n    // const light = new THREE.DirectionalLight(color, intensity);\n    // //light의 위치와 target의 위치를 지정한다\n    // light.position.set(0, 10, 0);\n    // light.target.position.set(-5, 0, 0);\n    // scene.add(light);\n    // scene.add(light.target);\n\n    //HemisphereLight : 반구광\n    //천장색(skycolor)과 바닥색(groundcolor) 혼합\n    // const skyColor = 0xb1e1ff; // 하늘색\n    // const groundColor = 0xb97a20; // 오렌지 브라운\n    // const intensity = 1;\n    // const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);\n    // scene.add(light);\n\n    // scene.background 설정 (원하는 배경색으로 설정)\n    scene.background = new THREE.Color(\"white\");\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const loader = new GLTFLoader();\n    loader.load(model, gltf => {\n      const loadedModel = gltf.scene;\n\n      // 재질 설정\n      //   const material = new THREE.MeshStandardMaterial({\n      //     color: 0xffffff,\n      //     roughness: 0.5,\n      //     metalness: 0.5,\n      //   });\n      //   loadedModel.traverse((node) => {\n      //     if (node.isMesh) {\n      //       node.material = material;\n      //     }\n      //   });\n\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n    // 애니메이션 루프\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (modelObject) {\n        // 모델 회전\n        modelObject.rotation.x += 0.005;\n        modelObject.rotation.y += 0.005;\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, [model]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_s(ModelViewer, \"EtACqWrxke9T1TwtqATmUyjvnlw=\");\n_c = ModelViewer;\nexport default ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","GLTFLoader","jsxDEV","_jsxDEV","ModelViewer","model","_s","containerRef","modelScale","setModelScale","loadedModel","setLoadedModel","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","color","intensity","light","AmbientLight","add","background","Color","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","loader","load","gltf","scale","animate","requestAnimationFrame","modelObject","rotation","x","y","render","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js"],"sourcesContent":["// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\n\nfunction ModelViewer({ model }) {\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 800);\n\n    // 조명 추가\n    // const light = new THREE.PointLight(0xffffff, 1);\n    // light.position.set(1, 1, 1);\n    // scene.add(light);\n\n    //AmbientLight : 자연광\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.AmbientLight(color, intensity);\n    scene.add(light);\n\n    //DirectionalLight : 직사광, 태양표현\n    // const color = 0xffffff;\n    // const intensity = 1;\n    // const light = new THREE.DirectionalLight(color, intensity);\n    // //light의 위치와 target의 위치를 지정한다\n    // light.position.set(0, 10, 0);\n    // light.target.position.set(-5, 0, 0);\n    // scene.add(light);\n    // scene.add(light.target);\n\n    //HemisphereLight : 반구광\n    //천장색(skycolor)과 바닥색(groundcolor) 혼합\n    // const skyColor = 0xb1e1ff; // 하늘색\n    // const groundColor = 0xb97a20; // 오렌지 브라운\n    // const intensity = 1;\n    // const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);\n    // scene.add(light);\n\n    // scene.background 설정 (원하는 배경색으로 설정)\n    scene.background = new THREE.Color(\"white\");\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n\n    const loader = new GLTFLoader();\n    loader.load(model, (gltf) => {\n      const loadedModel = gltf.scene;\n\n      // 재질 설정\n      //   const material = new THREE.MeshStandardMaterial({\n      //     color: 0xffffff,\n      //     roughness: 0.5,\n      //     metalness: 0.5,\n      //   });\n      //   loadedModel.traverse((node) => {\n      //     if (node.isMesh) {\n      //       node.material = material;\n      //     }\n      //   });\n\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n    // 애니메이션 루프\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (modelObject) {\n        // 모델 회전\n        modelObject.rotation.x += 0.005;\n        modelObject.rotation.y += 0.005;\n      }\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, [model]);\n\n  return <div ref={containerRef}></div>;\n}\n\nexport default ModelViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}