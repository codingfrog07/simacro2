{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModelViewer({\n  model\n}) {\n  _s();\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n  const [backgroundColor, setBackgroundColor] = useState(\"white\");\n  const handleColorChange = color => {\n    setBackgroundColor(color);\n  };\n  const rendererRef = useRef();\n  useEffect(() => {\n    const container = containerRef.current;\n    while (container.firstChild) {\n      container.removeChild(container.firstChild);\n    }\n    const scene = new THREE.Scene();\n    const aspectRatio = 1200 / 600; // Aspect ratio based on 1000x1000\n    const camera = new THREE.PerspectiveCamera(75, aspectRatio, 0.1, 1000);\n    camera.position.set(0, 0, 800);\n\n    // const light = new THREE.AmbientLight(0xffffff, 1);\n    // scene.add(light);\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    const canvasWidth = 1200; // Set canvas width\n    const canvasHeight = 600; // Set canvas height\n    renderer.setSize(canvasWidth, canvasHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    const loader = new GLTFLoader();\n    loader.load(model, gltf => {\n      const loadedModel = gltf.scene;\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (loadedModel) {\n        loadedModel.rotation.x += 0.005;\n        loadedModel.rotation.y += 0.005;\n      }\n      const currentRenderer = rendererRef.current;\n      currentRenderer.setClearColor(new THREE.Color(backgroundColor));\n      currentRenderer.render(scene, camera);\n    };\n    animate();\n  }, [model, modelScale, backgroundColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"color\",\n      value: backgroundColor,\n      onChange: e => handleColorChange(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelViewer, \"CyQ1aPy2nMTsOjLfmw0iCQk+J7M=\");\n_c = ModelViewer;\nexport default ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","GLTFLoader","jsxDEV","_jsxDEV","ModelViewer","model","_s","containerRef","modelScale","setModelScale","loadedModel","setLoadedModel","backgroundColor","setBackgroundColor","handleColorChange","color","rendererRef","container","current","firstChild","removeChild","scene","Scene","aspectRatio","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","canvasWidth","canvasHeight","setSize","appendChild","domElement","loader","load","gltf","scale","add","animate","requestAnimationFrame","rotation","x","y","currentRenderer","setClearColor","Color","render","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\n\nfunction ModelViewer({ model }) {\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1);\n  const [loadedModel, setLoadedModel] = useState(null);\n  const [backgroundColor, setBackgroundColor] = useState(\"white\");\n\n  const handleColorChange = (color) => {\n    setBackgroundColor(color);\n  };\n\n  const rendererRef = useRef();\n\n  useEffect(() => {\n    const container = containerRef.current;\n    while (container.firstChild) {\n      container.removeChild(container.firstChild);\n    }\n\n    const scene = new THREE.Scene();\n    const aspectRatio = 1200 / 600; // Aspect ratio based on 1000x1000\n    const camera = new THREE.PerspectiveCamera(75, aspectRatio, 0.1, 1000);\n    camera.position.set(0, 0, 800);\n\n    // const light = new THREE.AmbientLight(0xffffff, 1);\n    // scene.add(light);\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n    const canvasWidth = 1200; // Set canvas width\n    const canvasHeight = 600; // Set canvas height\n    renderer.setSize(canvasWidth, canvasHeight);\n    containerRef.current.appendChild(renderer.domElement);\n\n    rendererRef.current = renderer;\n\n    const loader = new GLTFLoader();\n    loader.load(model, (gltf) => {\n      const loadedModel = gltf.scene;\n      loadedModel.scale.set(modelScale, modelScale, modelScale);\n      scene.add(loadedModel);\n      setLoadedModel(loadedModel);\n    });\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (loadedModel) {\n        loadedModel.rotation.x += 0.005;\n        loadedModel.rotation.y += 0.005;\n      }\n\n      const currentRenderer = rendererRef.current;\n      currentRenderer.setClearColor(new THREE.Color(backgroundColor));\n      currentRenderer.render(scene, camera);\n    };\n\n    animate();\n  }, [model, modelScale, backgroundColor]);\n\n  return (\n    <div>\n      <input\n        type=\"color\"\n        value={backgroundColor}\n        onChange={(e) => handleColorChange(e.target.value)}\n      />\n      <div ref={containerRef}></div>\n    </div>\n  );\n}\n\nexport default ModelViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}