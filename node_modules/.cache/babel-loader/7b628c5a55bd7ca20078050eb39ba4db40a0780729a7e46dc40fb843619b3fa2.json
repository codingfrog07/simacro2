{"ast":null,"code":"var _jsxFileName = \"/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js\",\n  _s = $RefreshSig$();\n// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModelViewer({\n  model\n}) {\n  _s();\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1); // 모델의 크기를 조절할 상태 추가\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 5);\n    scene.background = new THREE.Color(\"white\");\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n    const loader = new GLTFLoader();\n    loader.parse(model, \"\", gltf => {\n      const model = gltf.scene;\n\n      // 모델의 크기를 조절\n      model.scale.set(modelScale, modelScale, modelScale);\n      scene.add(model);\n    });\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, [model, modelScale]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0.1\",\n      max: \"2\",\n      step: \"0.1\",\n      value: modelScale,\n      onChange: e => setModelScale(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelViewer, \"qiUOTFHZL9RntBBDgV0a2gE9XkU=\");\n_c = ModelViewer;\nexport default ModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ModelViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","GLTFLoader","jsxDEV","_jsxDEV","ModelViewer","model","_s","containerRef","modelScale","setModelScale","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","background","Color","renderer","WebGLRenderer","setSize","current","appendChild","domElement","loader","parse","gltf","scale","add","animate","requestAnimationFrame","render","ref","children","type","min","max","step","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yoojin/Desktop/testwork/simacro/src/ModelViewer.js"],"sourcesContent":["// client/src/ModelViewer.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\n\nfunction ModelViewer({ model }) {\n  const containerRef = useRef();\n  const [modelScale, setModelScale] = useState(1); // 모델의 크기를 조절할 상태 추가\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 5);\n\n    scene.background = new THREE.Color(\"white\");\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    containerRef.current.appendChild(renderer.domElement);\n\n    const loader = new GLTFLoader();\n    loader.parse(model, \"\", (gltf) => {\n      const model = gltf.scene;\n\n      // 모델의 크기를 조절\n      model.scale.set(modelScale, modelScale, modelScale);\n\n      scene.add(model);\n    });\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, [model, modelScale]);\n\n  return (\n    <div ref={containerRef}>\n      {/* 모델 크기 조절 슬라이더 추가 */}\n      <input\n        type=\"range\"\n        min=\"0.1\"\n        max=\"2\"\n        step=\"0.1\"\n        value={modelScale}\n        onChange={(e) => setModelScale(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default ModelViewer;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,WAAWA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC9B,MAAMC,YAAY,GAAGV,MAAM,CAAC,CAAC;EAC7B,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDJ,MAAM,CAACK,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE5BR,KAAK,CAACS,UAAU,GAAG,IAAInB,KAAK,CAACoB,KAAK,CAAC,OAAO,CAAC;IAE3C,MAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAACT,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDT,YAAY,CAACiB,OAAO,CAACC,WAAW,CAACJ,QAAQ,CAACK,UAAU,CAAC;IAErD,MAAMC,MAAM,GAAG,IAAI1B,UAAU,CAAC,CAAC;IAC/B0B,MAAM,CAACC,KAAK,CAACvB,KAAK,EAAE,EAAE,EAAGwB,IAAI,IAAK;MAChC,MAAMxB,KAAK,GAAGwB,IAAI,CAACnB,KAAK;;MAExB;MACAL,KAAK,CAACyB,KAAK,CAACZ,GAAG,CAACV,UAAU,EAAEA,UAAU,EAAEA,UAAU,CAAC;MAEnDE,KAAK,CAACqB,GAAG,CAAC1B,KAAK,CAAC;IAClB,CAAC,CAAC;IAEF,MAAM2B,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BX,QAAQ,CAACa,MAAM,CAACxB,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAEDoB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAAC3B,KAAK,EAAEG,UAAU,CAAC,CAAC;EAEvB,oBACEL,OAAA;IAAKgC,GAAG,EAAE5B,YAAa;IAAA6B,QAAA,eAErBjC,OAAA;MACEkC,IAAI,EAAC,OAAO;MACZC,GAAG,EAAC,KAAK;MACTC,GAAG,EAAC,GAAG;MACPC,IAAI,EAAC,KAAK;MACVC,KAAK,EAAEjC,UAAW;MAClBkC,QAAQ,EAAGC,CAAC,IAAKlC,aAAa,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC1C,EAAA,CAnDQF,WAAW;AAAA6C,EAAA,GAAX7C,WAAW;AAqDpB,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}